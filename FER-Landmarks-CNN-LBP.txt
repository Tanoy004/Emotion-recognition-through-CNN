
#FER-Landmarks-CNN-LBP-SVM on FER2013.txt


#####

# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory

import os
print(os.listdir("../input"))
print(os.listdir("../input/facial-expression"))
print(os.listdir("../input/modified-fer2013"))
print(os.listdir("../input/train-landmarks-fer2013"))

# Any results you write to the current directory are saved as output.


#
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

train_lan=np.load('../input/train-landmarks-fer2013/training_landmarks.npy')
print(train_lan.shape)
train_lbp=np.load('../input/train-landmarks-fer2013/training_lbp_features.npy')
print(train_lbp.shape)




#
# get the data

filname = '../input/modified-fer2013/modified_fer2013/fer2013.csv'
label_map = ['Neutral', 'Anger', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise']
names=['emotion','pixels','usage']

df=pd.read_csv('../input/modified-fer2013/modified_fer2013/fer2013.csv',names=names, na_filter=False)
im=df['pixels']
df.head(10)




#
# Read and process train dataset

df = pd.read_csv('../input/modified-fer2013/modified_fer2013/fer2013.csv')
df.head()

df["Usage"].value_counts()

train = df[["emotion", "pixels"]][df["Usage"] == "Training"]
train.isnull().sum()


train['pixels'] = train['pixels'].apply(lambda im: np.fromstring(im, sep=' '))
x_train = np.vstack(train['pixels'].values)
y_train = np.array(train["emotion"])
print(x_train.shape, y_train.shape)

x_train = np.array(x_train) / 255.0
print(x_train.shape, y_train.shape)

N = len(x_train)
X_train = x_train.reshape(N, 48, 48, 1)
print(X_train.shape, y_train.shape)

num_class = len(set(y_train))
print(num_class)





#
# Read and process valid dataset

public_test_df = df[["emotion", "pixels"]][df["Usage"]=="PublicTest"]

public_test_df["pixels"] = public_test_df["pixels"].apply(lambda im: np.fromstring(im, sep=' '))
x_valid = np.vstack(public_test_df["pixels"].values)
y_valid = np.array(public_test_df["emotion"])

x_valid = np.array(x_valid) / 255.0
print(x_valid.shape, y_valid.shape)

N = len(x_valid)
X_valid = x_valid.reshape(N, 48, 48, 1)
print(X_valid.shape, y_valid.shape)

num_class = len(set(y_valid))
print(num_class)




#
# Read and process test dataset

private_test_df = df[["emotion", "pixels"]][df["Usage"]=="PrivateTest"]

private_test_df["pixels"] = private_test_df["pixels"].apply(lambda im: np.fromstring(im, sep=' '))
x_test = np.vstack(public_test_df["pixels"].values)
y_test = np.array(public_test_df["emotion"])
# print(x_test)

x_test = np.array(x_test) / 255.0
# print(x_test)
print(x_test.shape, y_test.shape)

N = len(x_test)
X_test = x_test.reshape(N, 48, 48, 1)
# print(X_test)
print(X_test.shape, y_test.shape)

num_class = len(set(y_test))
print(num_class)




#
# X_train, X_valid, X_test is used for training CNN

# For applying to LBP+SVM

x_train = x_train.reshape(-1, 48, 48, 1)
x_valid = x_valid.reshape(-1, 48, 48, 1)
x_test = x_test.reshape(-1, 48, 48, 1)

print(x_train.shape, x_valid.shape, x_test.shape)
print(y_train.shape, y_valid.shape, y_test.shape)
print(y_test)




#
# from sklearn.model_selection import train_test_split
# X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.1, random_state=0)

# Process y for CNN (get capital Y)

Y_train = (np.arange(num_class) == y_train[:, None]).astype(np.float32)
Y_valid = (np.arange(num_class) == y_valid[:, None]).astype(np.float32)
Y_test = (np.arange(num_class) == y_test[:, None]).astype(np.float32)
print(Y_train.shape, Y_valid.shape, Y_test.shape)
print(Y_test)



#
# Get landmarks and lbp data

import numpy as np

train_lan=np.load('../input/train-landmarks-fer2013/training_landmarks.npy')
valid_lan=np.load('../input/train-landmarks-fer2013/PublicTestlandmarks.npy')
test_lan=np.load('../input/train-landmarks-fer2013/PrivateTest_landmarks.npy')

train_lbp=np.load('../input/train-landmarks-fer2013/training_lbp_features.npy')
valid_lbp=np.load('../input/train-landmarks-fer2013/PublicTest_lbp_features.npy')
test_lbp=np.load('../input/train-landmarks-fer2013/PrivteTest_lbp_features.npy')

print(train_lan.shape)
print(train_lbp.shape)

train_lan = np.array([x.flatten() for x in train_lan])
valid_lan = np.array([x.flatten() for x in valid_lan])
test_lan = np.array([x.flatten() for x in test_lan])
print(train_lan.shape)


lbp_train = np.concatenate((train_lan, train_lbp), axis=1)
lbp_valid = np.concatenate((valid_lan, valid_lbp), axis=1)
lbp_test = np.concatenate((test_lan, test_lbp), axis=1)
print(lbp_train.shape)




#
def evaluate(model, X, Y):
    predicted_Y = model.predict(X)
    accuracy = accuracy_score(Y, predicted_Y)
    return accuracy


def matrix(svm_model, v1, y1, t2, y2):

    validation_accuracy = evaluate(svm_model, v1, y1)
    print("  - validation accuracy = {0:.1f}".format(validation_accuracy*100))

    valid_labels = svm_model.predict(v1)
    print(classification_report(y1, valid_labels))
    mat = confusion_matrix(y1, valid_labels)
    print(mat)

    test_accuracy = evaluate(svm_model, t2, y2)
    print("  - test accuracy = {0:.1f}".format(test_accuracy*100))

    test_labels = svm_model.predict(t2)
    print(classification_report(y2, test_labels))
    mat = confusion_matrix(y2, test_labels)
    print(mat)




#
import time
from sklearn.svm import LinearSVC, SVC, NuSVC
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report, confusion_matrix

